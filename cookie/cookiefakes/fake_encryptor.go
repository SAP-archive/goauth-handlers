// This file was generated by counterfeiter
package cookiefakes

import (
	"net/http"
	"sync"

	"github.com/SAP/goauth_handlers/cookie"
)

type FakeEncryptor struct {
	EncryptStub        func(cookie *http.Cookie) error
	encryptMutex       sync.RWMutex
	encryptArgsForCall []struct {
		cookie *http.Cookie
	}
	encryptReturns struct {
		result1 error
	}
	DecryptStub        func(cookie *http.Cookie) error
	decryptMutex       sync.RWMutex
	decryptArgsForCall []struct {
		cookie *http.Cookie
	}
	decryptReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEncryptor) Encrypt(cookie *http.Cookie) error {
	fake.encryptMutex.Lock()
	fake.encryptArgsForCall = append(fake.encryptArgsForCall, struct {
		cookie *http.Cookie
	}{cookie})
	fake.recordInvocation("Encrypt", []interface{}{cookie})
	fake.encryptMutex.Unlock()
	if fake.EncryptStub != nil {
		return fake.EncryptStub(cookie)
	} else {
		return fake.encryptReturns.result1
	}
}

func (fake *FakeEncryptor) EncryptCallCount() int {
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	return len(fake.encryptArgsForCall)
}

func (fake *FakeEncryptor) EncryptArgsForCall(i int) *http.Cookie {
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	return fake.encryptArgsForCall[i].cookie
}

func (fake *FakeEncryptor) EncryptReturns(result1 error) {
	fake.EncryptStub = nil
	fake.encryptReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptor) Decrypt(cookie *http.Cookie) error {
	fake.decryptMutex.Lock()
	fake.decryptArgsForCall = append(fake.decryptArgsForCall, struct {
		cookie *http.Cookie
	}{cookie})
	fake.recordInvocation("Decrypt", []interface{}{cookie})
	fake.decryptMutex.Unlock()
	if fake.DecryptStub != nil {
		return fake.DecryptStub(cookie)
	} else {
		return fake.decryptReturns.result1
	}
}

func (fake *FakeEncryptor) DecryptCallCount() int {
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	return len(fake.decryptArgsForCall)
}

func (fake *FakeEncryptor) DecryptArgsForCall(i int) *http.Cookie {
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	return fake.decryptArgsForCall[i].cookie
}

func (fake *FakeEncryptor) DecryptReturns(result1 error) {
	fake.DecryptStub = nil
	fake.decryptReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEncryptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cookie.Encryptor = new(FakeEncryptor)
