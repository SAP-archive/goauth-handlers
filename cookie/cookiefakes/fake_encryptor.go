// Code generated by counterfeiter. DO NOT EDIT.
package cookiefakes

import (
	http "net/http"
	sync "sync"

	cookie "github.com/SAP/goauth-handlers/cookie"
)

type FakeEncryptor struct {
	DecryptStub        func(*http.Cookie) error
	decryptMutex       sync.RWMutex
	decryptArgsForCall []struct {
		arg1 *http.Cookie
	}
	decryptReturns struct {
		result1 error
	}
	decryptReturnsOnCall map[int]struct {
		result1 error
	}
	EncryptStub        func(*http.Cookie) error
	encryptMutex       sync.RWMutex
	encryptArgsForCall []struct {
		arg1 *http.Cookie
	}
	encryptReturns struct {
		result1 error
	}
	encryptReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEncryptor) Decrypt(arg1 *http.Cookie) error {
	fake.decryptMutex.Lock()
	ret, specificReturn := fake.decryptReturnsOnCall[len(fake.decryptArgsForCall)]
	fake.decryptArgsForCall = append(fake.decryptArgsForCall, struct {
		arg1 *http.Cookie
	}{arg1})
	fake.recordInvocation("Decrypt", []interface{}{arg1})
	fake.decryptMutex.Unlock()
	if fake.DecryptStub != nil {
		return fake.DecryptStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.decryptReturns
	return fakeReturns.result1
}

func (fake *FakeEncryptor) DecryptCallCount() int {
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	return len(fake.decryptArgsForCall)
}

func (fake *FakeEncryptor) DecryptCalls(stub func(*http.Cookie) error) {
	fake.decryptMutex.Lock()
	defer fake.decryptMutex.Unlock()
	fake.DecryptStub = stub
}

func (fake *FakeEncryptor) DecryptArgsForCall(i int) *http.Cookie {
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	argsForCall := fake.decryptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEncryptor) DecryptReturns(result1 error) {
	fake.decryptMutex.Lock()
	defer fake.decryptMutex.Unlock()
	fake.DecryptStub = nil
	fake.decryptReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptor) DecryptReturnsOnCall(i int, result1 error) {
	fake.decryptMutex.Lock()
	defer fake.decryptMutex.Unlock()
	fake.DecryptStub = nil
	if fake.decryptReturnsOnCall == nil {
		fake.decryptReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decryptReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptor) Encrypt(arg1 *http.Cookie) error {
	fake.encryptMutex.Lock()
	ret, specificReturn := fake.encryptReturnsOnCall[len(fake.encryptArgsForCall)]
	fake.encryptArgsForCall = append(fake.encryptArgsForCall, struct {
		arg1 *http.Cookie
	}{arg1})
	fake.recordInvocation("Encrypt", []interface{}{arg1})
	fake.encryptMutex.Unlock()
	if fake.EncryptStub != nil {
		return fake.EncryptStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.encryptReturns
	return fakeReturns.result1
}

func (fake *FakeEncryptor) EncryptCallCount() int {
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	return len(fake.encryptArgsForCall)
}

func (fake *FakeEncryptor) EncryptCalls(stub func(*http.Cookie) error) {
	fake.encryptMutex.Lock()
	defer fake.encryptMutex.Unlock()
	fake.EncryptStub = stub
}

func (fake *FakeEncryptor) EncryptArgsForCall(i int) *http.Cookie {
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	argsForCall := fake.encryptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEncryptor) EncryptReturns(result1 error) {
	fake.encryptMutex.Lock()
	defer fake.encryptMutex.Unlock()
	fake.EncryptStub = nil
	fake.encryptReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptor) EncryptReturnsOnCall(i int, result1 error) {
	fake.encryptMutex.Lock()
	defer fake.encryptMutex.Unlock()
	fake.EncryptStub = nil
	if fake.encryptReturnsOnCall == nil {
		fake.encryptReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.encryptReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncryptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decryptMutex.RLock()
	defer fake.decryptMutex.RUnlock()
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEncryptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cookie.Encryptor = new(FakeEncryptor)
