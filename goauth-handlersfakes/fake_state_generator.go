// Code generated by counterfeiter. DO NOT EDIT.
package goauthhandlersfakes

import (
	sync "sync"

	goauth_handlers "github.com/SAP/goauth-handlers"
)

type FakeStateGenerator struct {
	GenerateStateStub        func() (string, error)
	generateStateMutex       sync.RWMutex
	generateStateArgsForCall []struct {
	}
	generateStateReturns struct {
		result1 string
		result2 error
	}
	generateStateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStateGenerator) GenerateState() (string, error) {
	fake.generateStateMutex.Lock()
	ret, specificReturn := fake.generateStateReturnsOnCall[len(fake.generateStateArgsForCall)]
	fake.generateStateArgsForCall = append(fake.generateStateArgsForCall, struct {
	}{})
	fake.recordInvocation("GenerateState", []interface{}{})
	fake.generateStateMutex.Unlock()
	if fake.GenerateStateStub != nil {
		return fake.GenerateStateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateStateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStateGenerator) GenerateStateCallCount() int {
	fake.generateStateMutex.RLock()
	defer fake.generateStateMutex.RUnlock()
	return len(fake.generateStateArgsForCall)
}

func (fake *FakeStateGenerator) GenerateStateCalls(stub func() (string, error)) {
	fake.generateStateMutex.Lock()
	defer fake.generateStateMutex.Unlock()
	fake.GenerateStateStub = stub
}

func (fake *FakeStateGenerator) GenerateStateReturns(result1 string, result2 error) {
	fake.generateStateMutex.Lock()
	defer fake.generateStateMutex.Unlock()
	fake.GenerateStateStub = nil
	fake.generateStateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStateGenerator) GenerateStateReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateStateMutex.Lock()
	defer fake.generateStateMutex.Unlock()
	fake.GenerateStateStub = nil
	if fake.generateStateReturnsOnCall == nil {
		fake.generateStateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateStateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStateGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateStateMutex.RLock()
	defer fake.generateStateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStateGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ goauth_handlers.StateGenerator = new(FakeStateGenerator)
