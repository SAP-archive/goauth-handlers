// Code generated by counterfeiter. DO NOT EDIT.
package goauthhandlersfakes

import (
	sync "sync"

	goauth_handlers "github.com/SAP/goauth-handlers"
	oauth2 "golang.org/x/oauth2"
)

type FakeTokenProvider struct {
	LoginURLStub        func(string) string
	loginURLMutex       sync.RWMutex
	loginURLArgsForCall []struct {
		arg1 string
	}
	loginURLReturns struct {
		result1 string
	}
	loginURLReturnsOnCall map[int]struct {
		result1 string
	}
	RequestTokenStub        func(string) (*oauth2.Token, error)
	requestTokenMutex       sync.RWMutex
	requestTokenArgsForCall []struct {
		arg1 string
	}
	requestTokenReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	requestTokenReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenProvider) LoginURL(arg1 string) string {
	fake.loginURLMutex.Lock()
	ret, specificReturn := fake.loginURLReturnsOnCall[len(fake.loginURLArgsForCall)]
	fake.loginURLArgsForCall = append(fake.loginURLArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("LoginURL", []interface{}{arg1})
	fake.loginURLMutex.Unlock()
	if fake.LoginURLStub != nil {
		return fake.LoginURLStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.loginURLReturns
	return fakeReturns.result1
}

func (fake *FakeTokenProvider) LoginURLCallCount() int {
	fake.loginURLMutex.RLock()
	defer fake.loginURLMutex.RUnlock()
	return len(fake.loginURLArgsForCall)
}

func (fake *FakeTokenProvider) LoginURLCalls(stub func(string) string) {
	fake.loginURLMutex.Lock()
	defer fake.loginURLMutex.Unlock()
	fake.LoginURLStub = stub
}

func (fake *FakeTokenProvider) LoginURLArgsForCall(i int) string {
	fake.loginURLMutex.RLock()
	defer fake.loginURLMutex.RUnlock()
	argsForCall := fake.loginURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenProvider) LoginURLReturns(result1 string) {
	fake.loginURLMutex.Lock()
	defer fake.loginURLMutex.Unlock()
	fake.LoginURLStub = nil
	fake.loginURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTokenProvider) LoginURLReturnsOnCall(i int, result1 string) {
	fake.loginURLMutex.Lock()
	defer fake.loginURLMutex.Unlock()
	fake.LoginURLStub = nil
	if fake.loginURLReturnsOnCall == nil {
		fake.loginURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.loginURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTokenProvider) RequestToken(arg1 string) (*oauth2.Token, error) {
	fake.requestTokenMutex.Lock()
	ret, specificReturn := fake.requestTokenReturnsOnCall[len(fake.requestTokenArgsForCall)]
	fake.requestTokenArgsForCall = append(fake.requestTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RequestToken", []interface{}{arg1})
	fake.requestTokenMutex.Unlock()
	if fake.RequestTokenStub != nil {
		return fake.RequestTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenProvider) RequestTokenCallCount() int {
	fake.requestTokenMutex.RLock()
	defer fake.requestTokenMutex.RUnlock()
	return len(fake.requestTokenArgsForCall)
}

func (fake *FakeTokenProvider) RequestTokenCalls(stub func(string) (*oauth2.Token, error)) {
	fake.requestTokenMutex.Lock()
	defer fake.requestTokenMutex.Unlock()
	fake.RequestTokenStub = stub
}

func (fake *FakeTokenProvider) RequestTokenArgsForCall(i int) string {
	fake.requestTokenMutex.RLock()
	defer fake.requestTokenMutex.RUnlock()
	argsForCall := fake.requestTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenProvider) RequestTokenReturns(result1 *oauth2.Token, result2 error) {
	fake.requestTokenMutex.Lock()
	defer fake.requestTokenMutex.Unlock()
	fake.RequestTokenStub = nil
	fake.requestTokenReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenProvider) RequestTokenReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.requestTokenMutex.Lock()
	defer fake.requestTokenMutex.Unlock()
	fake.RequestTokenStub = nil
	if fake.requestTokenReturnsOnCall == nil {
		fake.requestTokenReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.requestTokenReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loginURLMutex.RLock()
	defer fake.loginURLMutex.RUnlock()
	fake.requestTokenMutex.RLock()
	defer fake.requestTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ goauth_handlers.TokenProvider = new(FakeTokenProvider)
